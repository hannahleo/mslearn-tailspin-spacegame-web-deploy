name: $(Date:yyyyMMdd)$(Rev:.r)_$(Build.BuildId)

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-18.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '3.1.300'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'
               
    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop
      
    # # Generate Release Notes (Crossplatform)
    # # Description - Generates a release notes file in a format of your choice from the build or release history
    # - task: XplatGenerateReleaseNotes@2
    #   inputs: 
    #      # Required arguments
    #      outputfile: '$(Build.ArtifactStagingDirectory)/releasenotes.md'
    #      templateLocation: File
    #      templatefile: 'build-handlebars-template.md'
    #      inlinetemplate: 'build-handlebars-template.md'
    #      getParentsAndChildren: true
    # - publish: '$(Build.ArtifactStagingDirectory)/releasenotes.md'
    #   artifact: ReleaseNotes
         
         
- stage: 'Empty'
  displayName: 'Approve this build?'
  jobs:
  - deployment: Deploy
    displayName: 'Do nothing'
    environment: doNothingEnv
    pool:
      vmImage: 'ubuntu-18.04'
      demands:
      - npm

- stage: 'Dev'
  displayName: 'Dev Deploy'
  dependsOn: Build
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
    )
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameDev)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'Dev_Documentation'
  displayName: 'Dev Documentation'
  dependsOn: Dev
  pool:
    vmImage: 'ubuntu-18.04'
    demands:
    - npm
  jobs: 
  - deployment: Deploy
    environment: documentation
  - job: 'ReleaseNotes'
    displayName: 'Publish release notes'
    steps:

    # Generate Release Notes (Crossplatform)
    # Description - Generates a release notes file in a format of your choice from the build or release history
    - task: XplatGenerateReleaseNotes@2
      inputs: 
         # Required arguments
         outputfile: '$(Build.ArtifactStagingDirectory)/devReleasenotes$(Build.BuildId).md'
         templateLocation: File
         templatefile: 'build-handlebars-template.md'
         inlinetemplate: 'build-handlebars-template.md'
         
    - publish: '$(Build.ArtifactStagingDirectory)/devReleasenotes$(Build.BuildId).md'
      artifact: DevReleaseNotes
              

- stage: 'Test'
  displayName: 'Test Deploy'
  dependsOn: Dev
  #condition: eq(variables['Build.Reason'], 'Schedule')
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: test
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameTest)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
  # - job: waitForValidation
  #   displayName: Wait for external validation  
  #   pool: server    
  #   timeoutInMinutes: 4320 # job times out in 3 days
  #   steps:   
  #    - task: ManualValidation@0
  #      timeoutInMinutes: 1440 # task times out in 1 day
  #      inputs:
  #          notifyUsers: |
  #             someone@example.com
  #          instructions: 'Please validate the build configuration and resume'
  #          onTimeout: 'resume'

- stage: 'Test_Documentation'
  displayName: 'Test Documentation'
  dependsOn: Test
  pool:
    vmImage: 'ubuntu-18.04'
    demands:
    - npm
  jobs: 
  - deployment: Deploy
    environment: documentation
  - job: 'ReleaseNotes'
    displayName: 'Publish release notes'
    steps:

    # Generate Release Notes (Crossplatform)
    # Description - Generates a release notes file in a format of your choice from the build or release history
    - task: XplatGenerateReleaseNotes@2
      inputs: 
         # Required arguments
         outputfile: '$(Build.ArtifactStagingDirectory)/testReleasenotes$(Build.BuildId).md'
         templateLocation: File
         templatefile: 'build-handlebars-template.md'
         inlinetemplate: 'build-handlebars-template.md'
         
    - publish: '$(Build.ArtifactStagingDirectory)/testReleasenotes$(Build.BuildId).md'
      artifact: TestReleaseNotes

- stage: 'Staging'
  displayName: 'Staging Deploy'
  dependsOn: Test
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: staging
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameStaging)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'Staging_Documentation'
  displayName: 'Staging Documentation'
  dependsOn: Staging
  pool:
    vmImage: 'ubuntu-18.04'
    demands:
    - npm
  jobs: 
  - deployment: Deploy
    environment: documentation
  - job: 'ReleaseNotes'
    displayName: 'Publish release notes'
    steps:

    # Generate Release Notes (Crossplatform)
    # Description - Generates a release notes file in a format of your choice from the build or release history
    - task: XplatGenerateReleaseNotes@2
      inputs: 
         # Required arguments
         outputfile: '$(Build.ArtifactStagingDirectory)/stagingReleasenotes$(Build.BuildId).md'
         templateLocation: File
         templatefile: 'build-handlebars-template.md'
         inlinetemplate: 'build-handlebars-template.md'
         
    # - publish: '$(Build.ArtifactStagingDirectory)/releasenotes.md'
    #   artifact: DocumentationReleaseNotes

    - task: richardfennellBM.BM-VSTS-XplatGenerateReleaseNotes.XplatGenerate-Release-Notes.XplatGenerateReleaseNotes@3
      inputs:
        outputfile: '$(Build.ArtifactStagingDirectory)/stagingInline$(Build.BuildId).md'
        outputVariableName: OutputText
        templateLocation: InLine
        inlinetemplate: |
          # Notes for build 
          **Build Number**: {{buildDetails.id}}
          **Build Trigger PR Number**: {{lookup buildDetails.triggerInfo 'pr.number'}} 

          # Associated Pull Requests ({{pullRequests.length}})
          {{#forEach pullRequests}}
          {{#if isFirst}}### Associated Pull Requests (only shown if  PR) {{/if}}
          *  **PR {{this.id}}**  {{this.title}}
          {{/forEach}}

          # Builds with associated WI/CS ({{builds.length}})
          {{#forEach builds}}
          {{#if isFirst}}## Builds {{/if}}
          ##  Build {{this.build.buildNumber}}
          {{#forEach this.commits}}
          {{#if isFirst}}### Commits {{/if}}
          - CS {{this.id}}
          {{/forEach}}
          {{#forEach this.workitems}}
          {{#if isFirst}}### Workitems {{/if}}
          - WI {{this.id}}
          {{/forEach}} 
          {{/forEach}}

          # Global list of WI ({{workItems.length}})
          {{#forEach workItems}}
          {{#if isFirst}}## Associated Work Items (only shown if  WI) {{/if}}
          *  **{{this.id}}**  {{lookup this.fields 'System.Title'}}
            - **WIT** {{lookup this.fields 'System.WorkItemType'}} 
            - **Tags** {{lookup this.fields 'System.Tags'}}
          {{/forEach}}

          {{#forEach commits}}
          {{#if isFirst}}### Associated commits{{/if}}
          * ** ID{{this.id}}** 
            -  **Message:** {{this.message}}
            -  **Commited by:** {{this.author.displayName}} 
            -  **FileCount:** {{this.changes.length}} 
          {{#forEach this.changes}}
                -  **File path (TFVC or TfsGit):** {{this.item.path}}  
                -  **File filename (GitHub):** {{this.filename}}  
          {{/forEach}}
          {{/forEach}}

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: StagingReleaseNotes
